import json
import os
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import openpyxl

API_TOKEN = "8213391771:AAFVwi2sk5F6sHB-nq0ehWPz9CnsObCPS7U"
ADMIN_IDS = [568126852]  # –¥–æ–¥–∞–π —ñ–Ω—à—ñ ID –∑–∞ –ø–æ—Ç—Ä–µ–±–∏

DATA_FILE = "data/users.json"
POLL_FILE = "data/polls.json"
os.makedirs("data", exist_ok=True)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}
polls = {}

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
def load_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def load_polls():
    if os.path.exists(POLL_FILE):
        with open(POLL_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_polls():
    with open(POLL_FILE, "w", encoding="utf-8") as f:
        json.dump(polls, f, ensure_ascii=False, indent=2)

users = load_users()
polls = load_polls()

# --- –¢–∞–π–º–µ—Ä ---
async def poll_timer(poll_id, duration):
    await asyncio.sleep(duration)
    if poll_id in polls and polls[poll_id]["active"]:
        await finish_poll(poll_id, auto=True)

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è ---
async def finish_poll(poll_id, auto=False):
    poll = polls.get(poll_id)
    if not poll:
        return
    poll["active"] = False
    save_polls()

    results = {}
    total_votes = len(poll["votes"])
    for vote in poll["votes"].values():
        results[vote] = results.get(vote, 0) + 1

    text = f"{'‚è∞ –ß–∞—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ!' if auto else 'üèÅ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ!'}\n\n"
    text += f"üìå {poll['question']}\n\n"

    # –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö
    for opt in poll["options"]:
        count = results.get(opt, 0)
        percent = (count / total_votes * 100) if total_votes else 0
        text += f"{opt}: {count} –≥–æ–ª–æ—Å(—ñ–≤) ({percent:.1f}%)\n"

    # –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –±—É–¥–∏–Ω–∫–∞—Ö
    house_stats = {}
    for uid, choice in poll["votes"].items():
        user = users.get(str(uid), {})
        house = user.get("house", "–ù–µ–≤—ñ–¥–æ–º–æ")
        house_stats[house] = house_stats.get(house, 0) + 1

    text += "\nüè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—É–¥–∏–Ω–∫–∞—Ö:\n"
    for house, count in house_stats.items():
        percent = (count / total_votes * 100) if total_votes else 0
        text += f"–ë—É–¥–∏–Ω–æ–∫ {house}: {count} ({percent:.1f}%)\n"

    for uid, data in users.items():
        if isinstance(data, dict) and data.get("approved"):
            try:
                await bot.send_message(uid, text)
            except:
                pass

# --- /status ---
@dp.message_handler(commands=["status"])
async def poll_status(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")

    if not polls:
        return await message.answer("‚ùå –ù–µ–º–∞—î –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")

    for poll_id, poll in polls.items():
        results = {}
        total_votes = len(poll["votes"])
        for vote in poll["votes"].values():
            results[vote] = results.get(vote, 0) + 1

        text = f"üìä {poll['question']} ({'–ê–∫—Ç–∏–≤–Ω–µ' if poll['active'] else '–ó–∞–≤–µ—Ä—à–µ–Ω–µ'})\n"
        for opt in poll["options"]:
            count = results.get(opt, 0)
            percent = (count / total_votes * 100) if total_votes else 0
            text += f"{opt}: {count} ({percent:.1f}%)\n"
        text += "\n"
        await message.answer(text)

# --- /stopvote ---
@dp.message_handler(commands=["stopvote"])
async def stop_vote(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.")

    if not polls:
        return await message.answer("‚ùå –ù–µ–º–∞—î –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")

    buttons = InlineKeyboardMarkup()
    for poll_id, poll in polls.items():
        if poll["active"]:
            buttons.add(InlineKeyboardButton(poll["question"], callback_data=f"stop_{poll_id}"))

    if not buttons.inline_keyboard:
        return await message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏:", reply_markup=buttons)

@dp.callback_query_handler(lambda c: c.data.startswith("stop_"))
async def stop_poll_callback(call: types.CallbackQuery):
    poll_id = call.data.split("_", 1)[1]
    await finish_poll(poll_id, auto=False)
    await call.message.answer("‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.")

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ü–æ—á–∞—Ç–∏"))
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω—å!", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–ü–æ—á–∞—Ç–∏")
async def agree(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True))
    await message.answer("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    uid = str(message.from_user.id)
    users[uid] = {"id": uid, "phone": message.contact.phone_number, "step": "fio"}
    save_users()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É —Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: users.get(str(m.from_user.id), {}).get("step") == "fio")
async def get_fio(message: types.Message):
    uid = str(message.from_user.id)
    parts = [p.strip() for p in message.text.split(",")]
    if len(parts) < 3:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: –ü–Ü–ë, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞")
    users[uid].update({"fio": parts[0], "house": parts[1], "flat": parts[2], "approved": True, "step": None})
    save_users()
    await message.answer("‚úÖ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")

# --- –ù–æ–≤–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ---
@dp.message_handler(commands=["newpoll"])
async def create_poll(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.")
    poll_id = str(len(polls) + 1)
    polls[poll_id] = {"question": None, "options": [], "end_time": None, "votes": {}, "active": True}
    users["poll_step"] = {"id": poll_id, "stage": "question"}
    save_users()
    save_polls()
    await message.answer("üó≥ –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:")

@dp.message_handler(lambda m: isinstance(users.get("poll_step"), dict) and users["poll_step"]["stage"] == "question")
async def poll_question(message: types.Message):
    poll_id = users["poll_step"]["id"]
    polls[poll_id]["question"] = message.text
    users["poll_step"]["stage"] = "options"
    save_users()
    save_polls()
    await message.answer("‚úè –í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:")

@dp.message_handler(lambda m: isinstance(users.get("poll_step"), dict) and users["poll_step"]["stage"] == "options")
async def poll_options(message: types.Message):
    poll_id = users["poll_step"]["id"]
    polls[poll_id]["options"] = [o.strip() for o in message.text.split(",") if o.strip()]
    users["poll_step"]["stage"] = "duration"
    save_users()
    save_polls()
    await message.answer("‚è± –í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö:")

@dp.message_handler(lambda m: isinstance(users.get("poll_step"), dict) and users["poll_step"]["stage"] == "duration")
async def poll_duration(message: types.Message):
    try:
        minutes = int(message.text)
    except:
        return await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

    poll_id = users["poll_step"]["id"]
    polls[poll_id]["end_time"] = (datetime.now() + timedelta(minutes=minutes)).isoformat()
    users.pop("poll_step", None)
    save_users()
    save_polls()

    kb = InlineKeyboardMarkup()
    for opt in polls[poll_id]["options"]:
        kb.add(InlineKeyboardButton(opt, callback_data=f"vote_{poll_id}_{opt}"))

    for uid, data in users.items():
        if isinstance(data, dict) and data.get("approved"):
            try:
                await bot.send_message(uid, f"üó≥ {polls[poll_id]['question']}", reply_markup=kb)
            except:
                pass

    asyncio.create_task(poll_timer(poll_id, minutes * 60))
    await message.answer("‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ!")

# --- –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ---
@dp.callback_query_handler(lambda c: c.data.startswith("vote_"))
async def vote_handler(call: types.CallbackQuery):
    _, poll_id, option = call.data.split("_", 2)
    poll = polls.get(poll_id)
    if not poll or not poll["active"] or datetime.now() > datetime.fromisoformat(poll["end_time"]):
        return await call.answer("‚õî –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–µ.", show_alert=True)

    user = users.get(str(call.from_user.id))
    if not user:
        return await call.answer("‚õî –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", show_alert=True)

    # –û–¥–∏–Ω –≥–æ–ª–æ—Å –∑ –∫–≤–∞—Ä—Ç–∏—Ä–∏
    for uid, choice in poll["votes"].items():
        if users.get(str(uid), {}).get("flat") == user.get("flat") and users.get(str(uid), {}).get("house") == user.get("house"):
            return await call.answer("‚õî –ó –≤–∞—à–æ—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏.", show_alert=True)

    poll["votes"][call.from_user.id] = option
    save_polls()
    await call.answer(f"‚úÖ –í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏: {option}", show_alert=True)

# --- –ï–∫—Å–ø–æ—Ä—Ç ---
@dp.message_handler(commands=["export"])
async def export_results(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏.")

    if not polls:
        return await message.answer("‚ùå –ù–µ–º–∞—î –≥–æ–ª–æ—Å—É–≤–∞–Ω—å.")

    for poll_id, poll in polls.items():
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["ID", "–ü–Ü–ë", "–ë—É–¥–∏–Ω–æ–∫", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ì–æ–ª–æ—Å"])
        for uid, vote in poll["votes"].items():
            data = users.get(str(uid), {})
            ws.append([uid, data.get("fio", ""), data.get("house", ""), data.get("flat", ""), vote])
        file_path = f"results_{poll_id}.xlsx"
        wb.save(file_path)
        await message.answer_document(open(file_path, "rb"))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
